"use client";

import React, { useEffect, useState } from "react";
import Layout from "@/components/layout";
import { useAppContext } from "@/context/appContext";
import { fetchData } from "@/utils/fetchData";
import TableGrid from "@/components/tableGrid";
import { useAuthActions } from "@/context/appContext/useAuthActions/index.jsx";

export default function Reports() {
    const { state, dispatch } = useAppContext();
    const [reports, setReports] = useState([]);
    const { handleLogout } = useAuthActions();

    const loadReports = async (
        url = `${process.env.NEXT_PUBLIC_API_URL}/api/reports`,
        options = {}
    ) => {
        const { force = false, validate = false } = options;
        try {
            dispatch({ type: "SET_LOADING", payload: true });
            const result = await fetchData(url, { force, validate });

            if (result?.logOut) {
                handleLogout();
                return;
            }

            if (result?.data) {
                setReports(result.data);
            }
        } catch (error) {
            console.error("Error fetching Reports:", error);
        } finally {
            dispatch({ type: "SET_LOADING", payload: false });
        }
    };

    useEffect(() => {
        loadReports();
    }, []);

    const columns = [
        {
            key: "_id",
            title: "ID",
            width: 90,
            render: (value) => value?.slice(-6),
        },
        {
            key: "tenantId",
            title: "Tenant",
            searchable: true,
            width: 180,
            render: (value) => value?.name || "-",
        },
        {
            key: "title",
            title: "Title",
            searchable: true,
            width: 250,
        },
        {
            key: "type",
            title: "Type",
            filterable: true,
            filterOptions: [
                { label: "All", value: "" },
                { label: "Compliance", value: "compliance" },
                { label: "Security Posture", value: "security_posture" },
            ],
            width: 160,
            render: (value) => (
                <span
                    style={{
                        backgroundColor: value === "compliance" ? "#e0f2fe" : "#dcfce7",
                        color: value === "compliance" ? "#0284c7" : "#16a34a",
                        padding: "2px 6px",
                        borderRadius: "6px",
                        textTransform: "capitalize",
                    }}
                >
                    {value?.replace("_", " ")}
                </span>
            ),
        },
        {
            key: "format",
            title: "Format",
            width: 100,
            render: (value) => (
                <span
                    style={{
                        backgroundColor: "#f3f4f6",
                        color: "#111827",
                        padding: "2px 6px",
                        borderRadius: "6px",
                        textTransform: "uppercase",
                    }}
                >
                    {value}
                </span>
            ),
        },
        {
            key: "generatedBy",
            title: "Generated By",
            width: 240,
            render: (value) =>
                value
                    ? `${value.name?.first || ""} ${value.name?.last || ""} (${value.email})`
                    : "-",
        },
        {
            key: "scheduled",
            title: "Scheduled",
            width: 120,
            render: (value) => (
                <span
                    style={{
                        color: value ? "#22c55e" : "#ef4444",
                        fontWeight: 600,
                    }}
                >
                    {value ? "Yes" : "No"}
                </span>
            ),
        },
        {
            key: "status",
            title: "Status",
            filterable: true,
            width: 150,
            filterOptions: [
                { label: "All", value: "" },
                { label: "Pending", value: "pending" },
                { label: "Completed", value: "completed" },
                { label: "Failed", value: "failed" },
            ],
            render: (value) => {
                const color =
                    value === "completed" ? "#22c55e" : value === "failed" ? "#ef4444" : "#eab308";
                return (
                    <span
                        style={{
                            backgroundColor: color + "20",
                            color,
                            padding: "2px 6px",
                            borderRadius: "6px",
                            fontWeight: 600,
                            textTransform: "capitalize",
                        }}
                    >
                        {value}
                    </span>
                );
            },
        },
        {
            key: "triggeredByAutomation",
            title: "Automation",
            width: 140,
            render: (value) => (
                <span
                    style={{
                        color: value ? "#16a34a" : "#71717a",
                        fontWeight: 500,
                    }}
                >
                    {value ? "Yes" : "No"}
                </span>
            ),
        },
        {
            key: "generatedAt",
            title: "Generated At",
            width: 180,
            render: (value) => {
                if (!value) return "-";
                const date = new Date(value);
                return date.toLocaleString();
            },
        },
        {
            key: "createdAt",
            title: "Created At",
            width: 180,
            render: (value) => {
                if (!value) return "-";
                const date = new Date(value);
                return date.toLocaleString();
            },
        },
        {
            key: "updatedAt",
            title: "Updated At",
            width: 180,
            render: (value) => {
                if (!value) return "-";
                const date = new Date(value);
                return date.toLocaleString();
            },
        },
        {
            key: "relatedAssets",
            title: "Related Assets",
            width: 150,
            render: (value) => value?.length || 0,
        },
        {
            key: "relatedPolicies",
            title: "Related Policies",
            width: 160,
            render: (value) => value?.length || 0,
        },
        {
            key: "relatedCompliance",
            title: "Related Compliance",
            width: 170,
            render: (value) => value?.length || 0,
        },
    ];

    return (
        <Layout>
            <TableGrid
                columns={columns}
                data={reports}
                paginationMode="client"
                pageSizeOptions={[5, 10, 20]}
                maxHeight="70vh"
                maxWidth="100%"
            />
        </Layout>
    );
}
